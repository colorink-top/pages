import GUI from"../../../../../libs/lil-gui.min.js";import{saveAs}from"../../../../../libs/FileSaver.js";import{initPreviewCssFn}from"./css.js";import{demoData}from"../../../demo-data.js";import{defaultWatermarkOptions,saveOptionsFn,getOptionsFn}from"../options.js";import{selectLocalFontFn}from"./font.js";const initOpts=demoData,optionsParams={};function refreshJoppInitJSON(){return Object.assign(initOpts.templateInfo,{name:optionsParams.name},{options:{letter:optionsParams.letter,fontFamily:optionsParams.fontFamily,fontSize:optionsParams.fontSize,letterSpacing:optionsParams.letterSpacing,opacity:optionsParams.opacity,color:optionsParams.color,angle:optionsParams.angle,x:optionsParams.x,y:optionsParams.y,hideSaveDate:optionsParams.hideSaveDate,hideHeader:optionsParams.hideHeader,hideFooter:optionsParams.hideFooter}}),initOpts}async function applyJoppInit(){refreshJoppInitJSON(),saveOptionsFn(initOpts.templateInfo.options),await window.joppInit(initOpts)}function getJoppPreviewPath(t){const a=(t=t||new URL(document.location.href)).searchParams.get("joppPreview");if(!a)return;const{origin:o,pathname:n}=t;return/^http[s]?:\/\//i.test(a)?a:/^true$/i.test(a)?o+n.substring(0,n.lastIndexOf("/"))+"/template.json":/^\//.test(a)?o+a:o+n.substring(0,n.lastIndexOf("/"))+"/"+a}function initGUI(){const{templateInfo:t}=initOpts,a=Object.assign({},defaultWatermarkOptions,getOptionsFn(),t.options),o=new GUI;Object.assign(optionsParams,{name:t.name,letter:a.letter||"",fontFamily:a.fontFamily||"",fontSize:parseInt(a.fontSize)||10,letterSpacing:parseInt(a.letterSpacing)||0,opacity:parseFloat(a.opacity)||.3,color:a.color||"black",angle:parseInt(a.angle)||45,x:parseInt(a.x)||0,y:parseInt(a.y)||0,hideSaveDate:!!a.hideSaveDate,hideHeader:!!a.hideHeader,hideFooter:!!a.hideFooter,selectFont:()=>{selectLocalFontFn(optionsParams.letter).then((t=>{n.setValue(t)}))},resetDefault:()=>{Object.assign(optionsParams,defaultWatermarkOptions,{name:"Letter Watermark"}),applyJoppInit();o.controllersRecursive().forEach((t=>t.updateDisplay()))},downloadJSON:()=>{const t=refreshJoppInitJSON(),a=getJoppPreviewPath(),o=new Blob([JSON.stringify({...t.templateInfo,path:a,template_version:1},null,2)],{type:"text/plain;charset=utf-8"});saveAs(o,optionsParams.name+"_template.json")}},t.options),o.add(optionsParams,"name").onChange(applyJoppInit),o.add(optionsParams,"letter").onChange(applyJoppInit),o.add(optionsParams,"selectFont");const n=o.add(optionsParams,"fontFamily").onChange(applyJoppInit);o.add(optionsParams,"fontSize",5,500).onChange(applyJoppInit),o.add(optionsParams,"letterSpacing",0,100).onChange(applyJoppInit),o.add(optionsParams,"opacity",0,1).onChange(applyJoppInit),o.addColor(optionsParams,"color").onChange(applyJoppInit),o.add(optionsParams,"angle",0,360).onChange(applyJoppInit),o.add(optionsParams,"x",-50,50,1).onChange(applyJoppInit),o.add(optionsParams,"y",-50,50,1).onChange(applyJoppInit),o.add(optionsParams,"hideSaveDate").onChange(applyJoppInit),o.add(optionsParams,"hideHeader").onChange(applyJoppInit),o.add(optionsParams,"hideFooter").onChange(applyJoppInit),o.add(optionsParams,"resetDefault"),o.add(optionsParams,"downloadJSON")}!async function(){const t=getJoppPreviewPath();if(t){const a=await fetch(t),o=await a.json();o.margin;Object.assign(initOpts,{templateInfo:o}),await joppInit(initOpts),initGUI(),initPreviewCssFn()}}();